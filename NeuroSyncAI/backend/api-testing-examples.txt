# ADHD Assistant API Testing Examples

Below are comprehensive examples for testing each major endpoint of your ADHD Assistant API using both Postman and cURL.

## Task Management Endpoints

### Create a Task

#### Postman
- **Method**: POST
- **URL**: `http://localhost:8000/tasks/`
- **Headers**: Content-Type: application/json
- **Body**:
```json
{
  "user_id": "user123",
  "title": "Complete project proposal",
  "description": "Write a draft of the ADHD management app proposal",
  "priority": "high",
  "due_date": "2023-12-20T17:00:00",
  "tags": ["work", "important", "writing"]
}
```

#### cURL
```bash
curl -X 'POST' \
  'http://localhost:8000/tasks/' \
  -H 'Content-Type: application/json' \
  -d '{
  "user_id": "user123",
  "title": "Complete project proposal",
  "description": "Write a draft of the ADHD management app proposal",
  "priority": "high",
  "due_date": "2023-12-20T17:00:00",
  "tags": ["work", "important", "writing"]
}'
```

### Get Tasks for a User

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/tasks/user123`
- **Query Parameters** (optional):
  - completed: false

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/tasks/user123?completed=false'
```

### Update a Task

#### Postman
- **Method**: PUT
- **URL**: `http://localhost:8000/tasks/task_id_here`
- **Headers**: Content-Type: application/json
- **Body**:
```json
{
  "title": "Updated task title",
  "completed": true,
  "priority": "medium"
}
```

#### cURL
```bash
curl -X 'PUT' \
  'http://localhost:8000/tasks/task_id_here' \
  -H 'Content-Type: application/json' \
  -d '{
  "title": "Updated task title",
  "completed": true,
  "priority": "medium"
}'
```

### Delete a Task

#### Postman
- **Method**: DELETE
- **URL**: `http://localhost:8000/tasks/task_id_here`

#### cURL
```bash
curl -X 'DELETE' 'http://localhost:8000/tasks/task_id_here'
```

## Chat/AI Assistant Endpoints

### Send a Message

#### Postman
- **Method**: POST
- **URL**: `http://localhost:8000/chat`
- **Headers**: Content-Type: application/json
- **Body**:
```json
{
  "message": "I need help breaking down my project into smaller tasks",
  "user_id": "user123",
  "context": {
    "system_prompt": "You are an ADHD coach specialized in task management",
    "temperature": 0.7
  }
}
```

#### cURL
```bash
curl -X 'POST' \
  'http://localhost:8000/chat' \
  -H 'Content-Type: application/json' \
  -d '{
  "message": "I need help breaking down my project into smaller tasks",
  "user_id": "user123",
  "context": {
    "system_prompt": "You are an ADHD coach specialized in task management",
    "temperature": 0.7
  }
}'
```

### Get Chat History

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/chat/history/user123`

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/chat/history/user123'
```

## Google Calendar Integration

### Get Authentication URL

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/calendar/authenticate?user_id=user123`

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/calendar/authenticate?user_id=user123'
```

### Get User's Calendar Events

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/calendar/events/user123`
- **Query Parameters** (optional):
  - calendar_id: primary
  - max_results: 10

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/calendar/events/user123?calendar_id=primary&max_results=10'
```

### Create Calendar Event

#### Postman
- **Method**: POST
- **URL**: `http://localhost:8000/calendar/events`
- **Headers**: Content-Type: application/json
- **Body**:
```json
{
  "user_id": "user123",
  "summary": "Team Meeting",
  "description": "Weekly team sync-up",
  "location": "Conference Room A",
  "start_time": "2023-12-15T10:00:00",
  "end_time": "2023-12-15T11:00:00",
  "attendees": ["colleague@example.com"]
}
```

#### cURL
```bash
curl -X 'POST' \
  'http://localhost:8000/calendar/events' \
  -H 'Content-Type: application/json' \
  -d '{
  "user_id": "user123",
  "summary": "Team Meeting",
  "description": "Weekly team sync-up",
  "location": "Conference Room A",
  "start_time": "2023-12-15T10:00:00",
  "end_time": "2023-12-15T11:00:00",
  "attendees": ["colleague@example.com"]
}'
```

## Financial Management

### Get Financial Summary

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/finance/summary/user123`
- **Query Parameters** (optional):
  - start_date: 2023-12-01
  - end_date: 2023-12-31
  - refresh: false

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/finance/summary/user123?start_date=2023-12-01&end_date=2023-12-31&refresh=false'
```

### Create/Update Budget

#### Postman
- **Method**: POST
- **URL**: `http://localhost:8000/finance/budget`
- **Headers**: Content-Type: application/json
- **Body**:
```json
{
  "user_id": "user123",
  "month": "2023-12",
  "total_budget": 3500,
  "categories": [
    {"category": "Groceries", "amount": 500, "notes": "Try to cook more at home"},
    {"category": "Restaurants", "amount": 300, "notes": "Limit to 2x per week"},
    {"category": "Entertainment", "amount": 200},
    {"category": "Utilities", "amount": 400},
    {"category": "Gas", "amount": 150},
    {"category": "Shopping", "amount": 250}
  ]
}
```

#### cURL
```bash
curl -X 'POST' \
  'http://localhost:8000/finance/budget' \
  -H 'Content-Type: application/json' \
  -d '{
  "user_id": "user123",
  "month": "2023-12",
  "total_budget": 3500,
  "categories": [
    {"category": "Groceries", "amount": 500, "notes": "Try to cook more at home"},
    {"category": "Restaurants", "amount": 300, "notes": "Limit to 2x per week"},
    {"category": "Entertainment", "amount": 200},
    {"category": "Utilities", "amount": 400},
    {"category": "Gas", "amount": 150},
    {"category": "Shopping", "amount": 250}
  ]
}'
```

### Get Budget Progress

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/finance/progress/user123`
- **Query Parameters** (optional):
  - month: 2023-12

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/finance/progress/user123?month=2023-12'
```

### List User Budgets

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/finance/budgets/user123`
- **Query Parameters** (optional):
  - limit: 6

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/finance/budgets/user123?limit=6'
```

## Banking Integration (Plaid)

### Generate Bank Authentication Link

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/banking/authenticate?user_id=user123`

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/banking/authenticate?user_id=user123'
```

### Get Connected Banks

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/banking/connected-banks/user123`

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/banking/connected-banks/user123'
```

### Get Bank Transactions

#### Postman
- **Method**: GET
- **URL**: `http://localhost:8000/banking/transactions/user123`
- **Query Parameters** (optional):
  - start_date: 2023-12-01
  - end_date: 2023-12-31

#### cURL
```bash
curl -X 'GET' 'http://localhost:8000/banking/transactions/user123?start_date=2023-12-01&end_date=2023-12-31'
```

## Testing Tips

1. **Create a User First**: Many endpoints require a valid user_id. Make sure to create a user first or use a consistent ID for testing.

2. **Use Valid ObjectIDs**: When testing endpoints that require MongoDB ObjectIDs (like task_id), use valid 24-character hexadecimal strings (e.g., "507f1f77bcf86cd799439011").

3. **Check Response Codes**: Successful responses typically return:
   - 200 OK for GET requests
   - 201 Created for POST requests creating new resources
   - 204 No Content for DELETE requests

4. **Inspect Error Responses**: Error responses include a "detail" field with information about what went wrong.

5. **Use Environment Variables**: In Postman, set up environment variables for base URL, user IDs, and other common values to make testing easier.
